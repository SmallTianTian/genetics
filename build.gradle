/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0.2/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    compile group : 'com.google.code.gson', name : 'gson', version : '2.8.0'
    compile group: 'commons-io',            name: 'commons-io', version: '2.5'
    // Use testng framework
    testCompile 'org.testng:testng:6.9.13.6'
}

test {
  useTestNG()

  // force to always run all tests
  // https://discuss.gradle.org/t/looking-for-a-way-to-force-a-successful-test-task-to-run-again-on-subsequent-runs-without-performing-a-clean/7154/8
  outputs.upToDateWhen { false }

  testLogging {
      // set options for log level LIFECYCLE
      events "passed", "skipped", "failed", "standardOut"
      showExceptions true
      exceptionFormat "full"
      showCauses true
      showStackTraces true

      // set options for log level DEBUG and INFO
      debug {
          events "started", "passed", "skipped", "failed", "standardOut", "standardError"
          exceptionFormat "full"
      }
      info.events = debug.events
      info.exceptionFormat = debug.exceptionFormat

      afterSuite { desc, result ->
          if (!desc.parent) { // will match the outermost suite
              def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
              def startItem = '|  ', endItem = '  |'
              def repeatLength = startItem.length() + output.length() + endItem.length()
              println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
          }
      }
  }
}
